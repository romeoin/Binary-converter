<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text to Binary Converter</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f0f0f0;
            color: #333;
            transition: background-color 0.3s, color 0.3s;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
            overflow: hidden; /* Prevent scrollbars from appearing */
            position: relative; /* To position flying creatures */
        }

        .dark-mode {
            background-color: #121212;
            color: #ffffff;
        }

        .container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            padding: 30px;
            max-width: 500px;
            width: 100%;
            transition: transform 0.3s;
            position: relative; /* For stacking context of flying creatures */
            z-index: 10; /* Ensure the container is above the creatures */
        }

        h1 {
            color: #4CAF50;
            margin-bottom: 20px;
            text-align: center;
        }

        input[type="text"],
        input[type="password"],
        textarea {
            width: 100%;
            border-radius: 5px;
            border: 1px solid #ccc;
            padding: 12px;
            font-size: 16px;
            margin-bottom: 15px;
            transition: border 0.3s, box-shadow 0.3s;
        }

        input[type="text"]:focus,
        input[type="password"]:focus,
        textarea:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
            outline: none;
        }

        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 12px 20px;
            margin: 10px 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s, transform 0.3s;
        }

        button:hover {
            background-color: #45a049;
            transform: scale(1.05);
        }

        h2 {
            margin-top: 20px;
            margin-bottom: 10px;
            text-align: center;
        }

        #binaryOutput {
            background: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            word-wrap: break-word;
            min-height: 60px;
            transition: all 0.3s;
            overflow-wrap: break-word;
        }

        label {
            margin-top: 20px;
            display: block;
            font-size: 14px;
        }

        .login-form,
        .register-form,
        .converter-form,
        .settings-form,
        .reset-password-form {
            display: none;
        }

        .active {
            display: block;
        }

        .profile {
            font-size: 20px;
            margin-top: 20px;
            font-weight: bold;
            text-align: center;
        }

        /* Smooth transitions for textarea and binary output */
        textarea {
            transition: height 0.3s;
        }

        /* Add hover effect for text area */
        textarea:hover {
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
        }

        /* Animation for flying birds */
        .creature {
            position: absolute;
            width: 50px;
            height: 50px;
            background-image: url('https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Bird_icon.svg/1024px-Bird_icon.svg.png'); /* Bird image */
            background-size: contain;
            background-repeat: no-repeat;
            animation: fly 10s linear infinite;
        }

        @keyframes fly {
            0% {
                transform: translateY(0) translateX(100vw);
            }
            100% {
                transform: translateY(-50vh) translateX(-100vw);
            }
        }

        /* Gear icon styles */
        .gear-icon {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 40px;
            height: 40px;
            background-image: url('https://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/Gear_icon.svg/1200px-Gear_icon.svg.png'); /* Gear icon image */
            background-size: contain;
            background-repeat: no-repeat;
            cursor: pointer;
            transition: transform 0.3s;
        }

        .gear-icon:hover {
            transform: rotate(20deg);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="gear-icon" id="settingsIcon"></div> <!-- Gear icon for settings -->
        <h1>Text to Binary Converter</h1>
        <div class="login-form active">
            <h2>Login</h2>
            <input type="text" id="loginUsername" placeholder="Username" />
            <input type="password" id="loginPassword" placeholder="Password" />
            <button id="loginBtn">Login</button>
            <button id="showRegisterBtn">Register</button>
        </div>
        <div class="register-form">
            <h2>Register</h2>
            <input type="text" id="registerUsername" placeholder="Username" />
            <input type="password" id="registerPassword" placeholder="Password" />
            <button id="registerBtn">Register</button>
            <button id="showLoginBtn">Login</button>
        </div>
        <div class="converter-form">
            <div class="profile" id="profileDisplay"></div>
            <textarea id="textInput" placeholder="Enter text here..." rows="4"></textarea>
            <button id="convertBtn">Convert to Binary</button>
            <button id="copyBtn">Copy to Clipboard</button>
            <button id="clearBtn">Clear</button>
            <h2>Binary Output:</h2>
            <div id="binaryOutput"></div>
            <label>
                <input type="checkbox" id="darkModeToggle"> Dark Mode
            </label>
            <button id="logoutBtn">Logout</button>
        </div>
        <div class="settings-form">
            <h2>Settings</h2>
            <label for="fontSizeSelect">Font Size:</label>
            <select id="fontSizeSelect">
                <option value="14px">Small</option>
                <option value="16px" selected>Medium</option>
                <option value="18px">Large</option>
            </select>
            <button id="saveSettingsBtn">Save Settings</button>
            <button id="backToConverterBtn">Back</button>
        </div>
        <div class="reset-password-form">
            <h2>Reset Password</h2>
            <input type="text" id="resetUsername" placeholder="Username" />
            <input type="password" id="resetPassword" placeholder="New Password" />
            <button id="resetPasswordBtn">Reset Password</button>
            <button id="backToLoginBtn">Back to Login</button>
        </div>
    </div>

    <!-- Creature elements -->
    <div id="creatureContainer"></div>

    <script>
        const users = JSON.parse(localStorage.getItem("users")) || [];
        const settings = JSON.parse(localStorage.getItem("settings")) || { fontSize: "16px" };

        // Apply saved settings
        document.body.style.fontSize = settings.fontSize;

        document.getElementById("showRegisterBtn").onclick = function() {
            document.querySelector(".login-form").classList.remove("active");
            document.querySelector(".register-form").classList.add("active");
        };

        document.getElementById("showLoginBtn").onclick = function() {
            document.querySelector(".register-form").classList.remove("active");
            document.querySelector(".login-form").classList.add("active");
        };

        document.getElementById("loginBtn").onclick = function() {
            const username = document.getElementById("loginUsername").value;
            const password = document.getElementById("loginPassword").value;

            // Validate user credentials
            const user = users.find(u => u.username === username && u.password === password);
            if (user) {
                alert("Login successful!");
                document.getElementById("profileDisplay").innerText = `Welcome, ${username}!`;
                document.querySelector(".login-form").classList.remove("active"); // Hide login form after login
                document.querySelector(".converter-form").classList.add("active");
            } else {
                alert("Invalid username or password!");
            }
        };

        document.getElementById("registerBtn").onclick = function() {
            const username = document.getElementById("registerUsername").value;
            const password = document.getElementById("registerPassword").value;

            // Check if the username already exists
            if (users.some(u => u.username === username)) {
                alert("Username already exists!");
                return;
            }

            // Register new user
            users.push({ username, password });
            localStorage.setItem("users", JSON.stringify(users));
            alert("Registration successful! You can now log in.");
            document.querySelector(".register-form").classList.remove("active");
            document.querySelector(".login-form").classList.add("active");
        };

        document.getElementById("convertBtn").onclick = function() {
            const inputText = document.getElementById("textInput").value;
            const binaryOutput = textToBinary(inputText);
            document.getElementById("binaryOutput").innerText = binaryOutput;
        };

        document.getElementById("copyBtn").onclick = function() {
            const binaryOutput = document.getElementById("binaryOutput").innerText;
            navigator.clipboard.writeText(binaryOutput).then(() => {
                alert("Copied to clipboard!");
            });
        };

        document.getElementById("clearBtn").onclick = function() {
            document.getElementById("textInput").value = '';
            document.getElementById("binaryOutput").innerText = '';
        };

        document.getElementById("darkModeToggle").onclick = function() {
            document.body.classList.toggle("dark-mode");
        };

        document.getElementById("settingsIcon").onclick = function() {
            document.querySelector(".converter-form").classList.remove("active");
            document.querySelector(".settings-form").classList.add("active");
        };

        document.getElementById("logoutBtn").onclick = function() {
            document.querySelector(".converter-form").classList.remove("active");
            document.querySelector(".login-form").classList.add("active");
            document.getElementById("profileDisplay").innerText = '';
        };

        document.getElementById("saveSettingsBtn").onclick = function() {
            const selectedFontSize = document.getElementById("fontSizeSelect").value;
            settings.fontSize = selectedFontSize;
            localStorage.setItem("settings", JSON.stringify(settings));
            document.body.style.fontSize = selectedFontSize; // Apply new font size
            alert("Settings saved!");
        };

        document.getElementById("backToConverterBtn").onclick = function() {
            document.querySelector(".settings-form").classList.remove("active");
            document.querySelector(".converter-form").classList.add("active");
        };

        document.getElementById("backToLoginBtn").onclick = function() {
            document.querySelector(".reset-password-form").classList.remove("active");
            document.querySelector(".login-form").classList.add("active");
        };

        document.getElementById("resetPasswordBtn").onclick = function() {
            const username = document.getElementById("resetUsername").value;
            const newPassword = document.getElementById("resetPassword").value;

            const user = users.find(u => u.username === username);
            if (user) {
                user.password = newPassword;
                localStorage.setItem("users", JSON.stringify(users));
                alert("Password reset successful! You can now log in.");
                document.querySelector(".reset-password-form").classList.remove("active");
                document.querySelector(".login-form").classList.add("active");
            } else {
                alert("Username not found!");
            }
        };

        function textToBinary(text) {
            return text.split('').map(char => {
                return char.charCodeAt(0).toString(2).padStart(8, '0');
            }).join(' ');
        }

        // Function to create and animate flying birds
        function createFlyingCreatures() {
            const creatureContainer = document.getElementById("creatureContainer");
            const creatureCount = 5; // Number of flying creatures

            for (let i = 0; i < creatureCount; i++) {
                const creature = document.createElement("div");
                creature.classList.add("creature");
                creature.style.left = `${Math.random() * 100}vw`; // Random horizontal position
                creature.style.animationDuration = `${Math.random() * 5 + 5}s`; // Random duration
                creatureContainer.appendChild(creature);
            }
        }

        createFlyingCreatures(); // Create flying creatures on load
    </script>
</body>
</html>
